网上资料：https://shimo.im/docs/uKMbBVwL3dUusKHV/

我的理解
-------------------------------------------------
其实一切皆是为了可维护。软件是有寿命的，越是可维护可扩展的软件寿命越长，
所以ioc的概念出现也就是为了构造可维护的软件，就像面向对象编程的几个原则，
虽然可维护的程序性能会有所损耗（也不一定，可能编译器有优化），但是随着计
算计硬件技术的发展，本地计算所损耗的性能越来越微不足道，最终影响软件性能
的必然是io。
实现了ioc的框架可以帮助程序员管理对象之间的依赖关系，不需要程序员手动去new。
ioc框架把对象实例化的过程透明化，程序员只需要面向接口编程，好的ioc框架提供
了很多扩展点，可以使程序员灵活使用被依赖的对象（对依赖对象增强），而不需要
关心其实现。

示例说明
-----------------------------------------------------
spring-original.xml表示仅传统xml方式描述依赖实现方式
spring-annotation.xml表示使用xml方式开启注解，然后使用注解描述是否需要注入元数据信息
spring-config.xml表示以javaconfig技术引入的xml，体现了三种依赖描述的混合使用方式
spring-autowire.xml表 自动装配

自动装配理解
-----------------------------------------------------
对于一个BeanDefintion，可以有4种自动装配模式，这种装配模式是根据setter，constructor方
法进行装配的，可以通过xml配置default-autowire字段或者通过改变BeanDefintion的装配模式（ImportSelectorRegistar）
默认情况下自己定义的BeanDefintion装配模式是no，那么如果使用注解方式@Resource或@Autowire进行
注入，则spring是使用BeanPostProcessor进行注入，注解方式根据注解在属性还是方法上，根据属性
字段或setter，constructor方法的反射方式进行的，@Resource默认先根据byName后根据byType，@Autowire相反

singleton依赖prototype的问题
-----------------------------------------------------
在业务方法中调用被@Lookup注解方法就可以实现，实现原始是动态代理

